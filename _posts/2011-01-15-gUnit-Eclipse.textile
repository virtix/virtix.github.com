---
layout: post
title: Running gUnit in ANTLR IDE for Eclipse
published: true
draft: false
draft_message:  _DRAFT - Subject to change_
pub_date: January 15, 2011
updated_date: January 19, 2011
---

{% if page.draft %} %(draft){{ page.draft_message  }}%  {%endif%}

h1. {{ page.title }}


p(meta). {{ page.pub_date }}  - {{site.location}}
Updated: {{ page.updated_date }}


h2. Background

!>(tn200)/images/this-island-earth-mutant.jpg!

Driven by curiosity, research interest, and in preparation for Paul Ammann's "Test Driven Development":http://cs.gmu.edu/~pammann/795.html course, I'm doing a TDD-based project for language translation and DSL generation. The informal abstract is that I want to transform SQL predicates to "DNF":http://en.wikipedia.org/wiki/Disjunctive_normal_form for the purpose of generating mutants for "mutation testing":http://en.wikipedia.org/wiki/Mutation_testing.   <div align="right">_What's better than killing mutants? Perhaps, killing alien zombies?_    &#151;> </div>   


There are a number of ways to recognize SQL constructs&#151;with a parser written by hand or with a parser generator. I chose "ANTLR":http://antlr.org mainly because I found Terence Parr's books to be lucid and compelling. As a matter of fact I would recommend the opening chapters in each book for _anyone_ who writes software. This is especially true for Chapter 2, _The Nature of Programming Languages_, in "The Definitive ANTLR Reference":http://pragprog.com/titles/tpantlr/the-definitive-antlr-reference. And "Language Implementation Patterns":http://pragprog.com/titles/tpdsl/language-implementation-patterns brings many design concepts together, which, for me, were critical in getting my head around language recognition and DSL generation.

What closed the ANTLR deal for me was "gUnit":http://www.antlr.org/wiki/display/ANTLR3/gUnit+-+Grammar+Unit+Testing, a unit test framework for ANTLR grammars. Writing a grammar that generates a parser is arguably complex and feels initially strange. But being able to write unit tests for grammars makes the process feel closer to what I'm used to. 

h2. This is about setting up gUnit in Eclipse and getting running

At some point, I'll try to write more about this journey, but for now I'll just jot down some notes and thoughts about getting started with gUnit in Eclipse. I'll assume you will install ANTLR and the Eclipse plugin, ANTLR IDE. As of ANTLR 3.x, gUnit is bundled with ANTLR, so, there's nothing extra you have to download, but _make sure you get ANTLR 3.3.1 or later. There was a bug in the previous version which broke gUnit._



h3. Basic steps

# "Download ANTLR 3.3.1":http://www.antlr.org/depot/antlr3/main/target (note and "Eclipse":http://www.eclipse.org/downloads/
# Install "ANTLR IDE":http://antlrv3ide.sourceforge.net/ (Eclipse Plugin) and all dependencies (GEF/Zest, and DLTK). 
# Create an ANTLR project in Eclipse (ANTLR IDE has some good info about how to bang this out under "Documentation")
# Create an Eclipse run configuration *That's what we're doing here.*

I'll assume steps 1-3 are done and there's some grammar to work with. So for #4, let's create a custom Eclipse run configuration but selecting Run > Run Configurations ... > Java application > New Launch configuration:
 
!/images/gunit-new-launch-config.png! 


Let's call our new launch configuration @gUnit_runner@. The main class is @org.antlr.gunit.Interp@.  As long as the ANTLR package is set up and the ANTLR jar is in your project's classpath, you're good to go.

!/images/gunit-run-configuration.png! 


Lastly, add a couple Eclipse variables to the arguments section so that when you're working with a @.gunit@ file, you can just hit F11 to run the test. @${workspace_loc}${resource_path}@

!/images/gunit-arguments.png! 


I have a simple grammar, @SQLToDNF.g@, which I'll share as it matures. My tests are rudimentary, but a _baby step_ in the right direction. Note the test cases in the "test suite" below correlate by name to the elements within the grammar and each individual test is a String that is processed by the generated parser. Here I use only @OK@ and @FAIL@ assertions, though there are a few others.  A nice gUnit feature is the ability to have a strin span multiple lines simply by wrapping it in << _the string_ >>. 

<div style="max-width:720px">
<pre class="brush: java">
gunit SQLToDNF;

//simple rule test
select_statement: 
  "SELECT * FROM foo" OK
  "SELECT tbla,tblb,asd,asd,asd,asdas,dasdasd FROM foo" OK
  "SELECT * from foo WHERE 1=1;" FAIL 

;

where_clause:
    "WHERE 1=1" OK
    "wheRe 1=1" OK
    "Where 1=1" OK
;

//test Tokens
SELECT :
 "SELECT" OK
 "select" OK
 "Select" OK
 "sElEcT" OK
 "seLECt" OK
;
</pre>
</div>


Now that we're set up, we can run this test within Eclipse by selecting Run > Run, or Ctrl+F11.

Results:

!/images/gunit-first-run.png!


There are a handful of assertions and you can test tree generation, too, though I'm not there yet:

!/images/gunit-grammar.png!:http://www.antlr.org/wiki/display/ANTLR3/gUnit+-+Grammar+Unit+Testing


h2. Summary

Obviously I'm just starting out with language apps and it's unfamiliar territory for me. gUnit seems like a good start, and wiring it into Eclipse makes building a grammar feel more like building test driven Java app.  

I still have some questions and comments, though:

* How can I debug and test my grammar at the same time?
* How can I best create groups of tests and run suites with many tests? Do I just generate jUnit tests from the gUnit grammar, or is there a better way?
* Richer output would be useful. An optional stacktrace would also be nice. (I'll look at the src and see if I can tweak it). (_Perhaps, an eclipse plugin, wired into jUnit?_)
* It would also be nice to be able to annotate suites and tests: 

<div style="max-width:720px">
<pre class="brush: java">
gunit SQLToDNF;

//simple rule test
@label "My Custom label ..."
select_statement : 
  @label "Basic Select Test"
  "SELECT * FROM foo" OK
  @label "Not-so-Basic Select Test"
  "SELECT this FROM that or the other" FAIL 
;

</pre>
</div>
* I would also like the ability to target and run specific tests rather than the entire test suite. Again, if it were posible to wire gUnit into jUnit within Eclipse, this would be a winner.

<p>&nbsp;</p>

*To Do*: I've seen some other grammars where the authors have used jUnit on the generated parsers. This may address some of the questions I have from above. I like the terse expressions of gUnit and the syntax aligns with the grammar itself, all of which is encouraging. 









